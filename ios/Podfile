# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

project 'Airpiggy.xcodeproj'

platform :ios, min_ios_version_supported
prepare_react_native_project!

# Disable new architecture to avoid C++20 compatibility issues
ENV['RCT_NEW_ARCH_ENABLED'] = '0'
ENV['RCT_FABRIC_ENABLED'] = '0'
ENV['RCT_TURBOMODULE_ENABLED'] = '0'

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'Airpiggy' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    # Disable new architecture to avoid C++20 compatibility issues
    :fabric_enabled => false,
    :hermes_enabled => true
  )


  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )
    
    # Fix Swift 6 compatibility issues
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['SWIFT_VERSION'] = '5.0'
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
        
        # Force C++17 for all targets to avoid C++20 compatibility issues
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        
        # Disable all warnings to prevent build failures
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
        config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
        config.build_settings['GCC_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
        config.build_settings['CLANG_WARN_EVERYTHING'] = 'NO'
        config.build_settings['GCC_WARN_EVERYTHING'] = 'NO'
        
        # Disable specific problematic warnings
        config.build_settings['WARNING_CFLAGS'] = '$(inherited) -w'
        config.build_settings['OTHER_CFLAGS'] = '$(inherited) -w'
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '$(inherited) -w'
        
        # Fix linker issues
        config.build_settings['OTHER_LDFLAGS'] ||= []
        config.build_settings['OTHER_LDFLAGS'] << '-Wl,-ld_classic'
      end
    end
    
    # Also fix the main project target
    installer.aggregate_targets.each do |target|
      target.user_project.targets.each do |project_target|
        project_target.build_configurations.each do |config|
          config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
          config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
          config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
          config.build_settings['WARNING_CFLAGS'] = '$(inherited) -w'
          config.build_settings['OTHER_CFLAGS'] = '$(inherited) -w'
          config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '$(inherited) -w'
        end
      end
    end
  end
end
